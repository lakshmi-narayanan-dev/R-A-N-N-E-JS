---------------------------------------------------------------------
ReactJS Project Install + Load
---------------------------------------------------------------------
1. sudo npm --location=global install create-react-app for installing globally & check create-react-app --version

2. npx create-react-app folder name to create a folder of predefined npm
scripts to execute react project

3. Once installation is completed , happy hacking ! message will be displayed
and open the terminal cd folder name && code . && npm start.

----------------
Why ?
---------------
1. CRA is bulk & slow.
2. Outdated and insecure.
3. Plugin Compatibility Issue.

-----------------------------------------
Since CRA not recommended by React Team
-----------------------------------------
1. Vite + reactjs - https://vitejs.dev/
2. NextJs
https://hackernoon.com/create-react-app-is-dead-here-are-some-alternatives

----------
yarn
----------
yarn --version
yarn create-react-app Foldername
cd Folder
yarn start

-----------------
What is ReactJS
----------------
Open source JS library
SPA single page application - UI
view layer in mobile & web application

Highlights >>
-----------
virtual DOM instead of Real DOM , real DOM manipulation is so expensive.
Server Side Rendering 
Follow 1 Way Data Binding / Unidirectional Flow

JSX
----
react is written in jsx = js + html
browser cannot understand jsx
babel [js compiler] converts jsx to browser understandable js

--------------------------------
ROADMAP.SH
--------------------------------
CLI Tools = yarn CRA Ink-CLI 
Belle BIT 
--------------------------------
Components = Class , Functional
Bacis - JSX , Props vs state , 
conditional rendering composition
--------------------------------
Rendering = Component Life Cycle, 
List and keys , Render Props , 
Events , Refs , Higher order 
components 
--------------------------------
Hooks - Use State , Use Effect
--------------------------------
Custom Hooks - useCallBack , 
useRef , useMemo , useReducer ,
useContext
--------------------------------
Routers = React Router
--------------------------------
State Management = Recall , Mobx,
Redux toolkit , Context , Zensland
--------------------------------
Styling =  Tailwind , Styled 
Components , Emotion
--------------------------------
Framework = NextJS
--------------------------------
Forms = React Hooks Forms
--------------------------------
API Calls = REST , AXIOS , Graph
QL 
--------------------------------


------------
Comparison
------------
https://www.browserstack.com/guide/angular-vs-react-vs-vue 
https://recoiljs.org/docs/introduction/getting-started/
https://radixweb.com/blog/nextjs-vs-react


-----------------------------------------------------------
File Structure
---------------------------
localhost , 3000
Reactjs - File Structure
node_modules = dependencies via npm/nextjs
public = html + favicons + Files in html meta tag
scr = components + All css + jsx 
All App.js is load on index.js -> index.html
.gitignore = mentioned files and folders ignored by git 
package.json = project configuration
package-lock.json = npm packages configuration
readme.md = Read the files for documentational references

Under Scr
---------
Assets = Images , BS/TW
utilities = Hooks , Function , Tests
Features = index.js , Contact page
Components = Buttons , CTA , Animation
API = Auth.js , Post.js


-------------------
Js For React
-------------------
Closures = Effective Apply = State & Scope manage
DOM manipulation
Higher Order Functions
Callbacks , Promises, Async , Await - Asynchronous programming
ECMAScript - latest feature & update
this & arrow function
Event Listener - interactive applications
Browser based JS debug tools
Prototype Based , difference between = inheritance model & classical model

------------------------
ReactJS Topics
------------------------
Reactjs - CLI Tools [Vite , CRA] , Components [Class, Functional, 
Basic (Jsx , states vs props , conditional rendering , composition), 
Rendering [Component Life Cycle , List and keys , Render props, Refs , 
Events , Higher order components] , Hooks [useState, useEffect, Custom 
Hooks - useCallBack/useRef/useMemo/useReducer/useContext] , Routers 
[react router /reach router] , State Management - Recoil , MobX, Redux , 
Styling - Emotion / Styled / Tailwind / Mantine , API calls - 
GraphQL[Apollo,Relay] / REST [react-query , Axios, SWR] , Testing [Cypress,Jest] ,
Frameworks - Remix / NextJS , Forms [React hook Forms , Final Form, Suspense , 
Portals , error boundaries] , Mobile Apps [React native]

---------------
AJAX
----------------
https://legacy.reactjs.org/docs/faq-ajax.html 

-----------------
Hooks
-----------------
https://www.freecodecamp.org/news/how-to-use-settimeout-in-react-using-hooks/

---------------
Projects
---------------
https://reactjsexample.com/ 
https://refine.dev/blog/react-admin-panel/#adding-resources-and-connect-pages-to-refine-app - Admin Panel React
